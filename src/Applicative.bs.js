// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Listz$FpCourseReason = require("./Listz.bs.js");
var Functor$FpCourseReason = require("./Functor.bs.js");

var map = Functor$FpCourseReason.ExactlyOneFunctor.map;

function pure(a) {
  return /* ExactlyOne */[a];
}

function apply(f, a) {
  return /* ExactlyOne */[Curry._1(f[0], a[0])];
}

var ExactlyOneApplicative = {
  map: map,
  pure: pure,
  apply: apply
};

var map$1 = Functor$FpCourseReason.ListzFunctor.map;

function pure$1(a) {
  return /* :: */[
          a,
          /* [] */0
        ];
}

function apply$1(fz, az) {
  var mapFn = function (f) {
    return Curry._2(map$1, f, az);
  };
  return Listz$FpCourseReason.flatten(Curry._2(map$1, mapFn, fz));
}

var ListzApplicative = {
  map: map$1,
  pure: pure$1,
  apply: apply$1
};

var map$2 = Functor$FpCourseReason.OptionFunctor.map;

function pure$2(a) {
  return Caml_option.some(a);
}

function apply$2(fOpt, aOpt) {
  if (fOpt !== undefined && aOpt !== undefined) {
    return Caml_option.some(Curry._1(fOpt, Caml_option.valFromOption(aOpt)));
  }
  
}

var OptionApplicative = {
  map: map$2,
  pure: pure$2,
  apply: apply$2
};

function MakeFunctionApplicative(TYPE) {
  var FunctionFunctor = Functor$FpCourseReason.MakeFunctionFunctor(TYPE);
  var map = FunctionFunctor.Functor.map;
  var pure = function (a, _t) {
    return a;
  };
  var apply = function (tab, ta, t) {
    return Curry._2(tab, t, Curry._1(ta, t));
  };
  var Applicative = {
    map: map,
    pure: pure,
    apply: apply
  };
  return {
          FunctionFunctor: FunctionFunctor,
          Applicative: Applicative
        };
}

function MakeApplicativeUtils(Applicative) {
  var lift2 = function (abc, ta, tb) {
    return Curry._2(Applicative.apply, Curry._2(Applicative.map, abc, ta), tb);
  };
  var lift2$prime = function (abc, ta, tb) {
    return Curry._2(Applicative.apply, Curry._2(Applicative.map, abc, ta), tb);
  };
  return {
          lift2: lift2,
          lift2$prime: lift2$prime
        };
}

exports.ExactlyOneApplicative = ExactlyOneApplicative;
exports.ListzApplicative = ListzApplicative;
exports.OptionApplicative = OptionApplicative;
exports.MakeFunctionApplicative = MakeFunctionApplicative;
exports.MakeApplicativeUtils = MakeApplicativeUtils;
/* Listz-FpCourseReason Not a pure module */
