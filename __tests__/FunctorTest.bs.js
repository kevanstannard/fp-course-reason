// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Reader$FpCourseReason = require("../src/Reader.bs.js");
var Functor$FpCourseReason = require("../src/Functor.bs.js");
var ExactlyOne$FpCourseReason = require("../src/ExactlyOne.bs.js");

Jest.describe("Functor", (function (param) {
        Jest.describe("ExactlyOne", (function (param) {
                return Jest.test("map is correct", (function (param) {
                              var plusOne = function (param) {
                                return 1 + param | 0;
                              };
                              var result = Curry._2(Functor$FpCourseReason.ExactlyOneFunctor.map, plusOne, /* ExactlyOne */[2]);
                              return Jest.Expect.toBe("ExactlyOne(3)", Jest.Expect.expect(ExactlyOne$FpCourseReason.toString(result)));
                            }));
              }));
        Jest.describe("Listz", (function (param) {
                Jest.test("map is correct for an empty list", (function (param) {
                        var plusOne = function (param) {
                          return 1 + param | 0;
                        };
                        var result = Curry._2(Functor$FpCourseReason.ListzFunctor.map, plusOne, /* [] */0);
                        return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(result));
                      }));
                return Jest.test("map is correct for a non empty list", (function (param) {
                              var plusOne = function (param) {
                                return 1 + param | 0;
                              };
                              var result = Curry._2(Functor$FpCourseReason.ListzFunctor.map, plusOne, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          2,
                                          /* :: */[
                                            3,
                                            /* :: */[
                                              4,
                                              /* [] */0
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("Option", (function (param) {
                Jest.test("map is correct for None", (function (param) {
                        var plusOne = function (param) {
                          return 1 + param | 0;
                        };
                        var result = Functor$FpCourseReason.OptionFunctor.map(plusOne, undefined);
                        return Jest.Expect.toEqual(undefined, Jest.Expect.expect(result));
                      }));
                return Jest.test("map is correct for Some", (function (param) {
                              var plusOne = function (param) {
                                return 1 + param | 0;
                              };
                              var result = Functor$FpCourseReason.OptionFunctor.map(plusOne, 2);
                              return Jest.Expect.toEqual(3, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("Reader", (function (param) {
                return Jest.test("map is correct", (function (param) {
                              var plusOne = function (param) {
                                return 1 + param | 0;
                              };
                              var reader = /* Reader */[(function (param) {
                                    return (param << 1);
                                  })];
                              var ReaderFunctorInt = Functor$FpCourseReason.MakeReaderFunctor({ });
                              var result = Curry._2(ReaderFunctorInt.Functor.map, plusOne, reader);
                              return Jest.Expect.toEqual(5, Jest.Expect.expect(Reader$FpCourseReason.run(result, 2)));
                            }));
              }));
        return Jest.describe("Function", (function (param) {
                      return Jest.test("map is correct", (function (param) {
                                    var f = function (param) {
                                      return 1 + param | 0;
                                    };
                                    var g = function (param) {
                                      return (param << 1);
                                    };
                                    var FunctionFunctorInt = Functor$FpCourseReason.MakeFunctionFunctor({ });
                                    var fg = Curry._2(FunctionFunctorInt.Functor.map, f, g);
                                    return Jest.Expect.toEqual(5, Jest.Expect.expect(Curry._1(fg, 2)));
                                  }));
                    }));
      }));

/*  Not a pure module */
