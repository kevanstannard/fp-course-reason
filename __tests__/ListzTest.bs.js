// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Util$Data61Reason = require("../src/Util.bs.js");
var Listz$Data61Reason = require("../src/Listz.bs.js");

Jest.describe("Listz", (function (param) {
        Jest.describe("headOr", (function (param) {
                Jest.test("it returns the head", (function (param) {
                        var result = Listz$Data61Reason.headOr(0, /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toBe(1, Jest.Expect.expect(result));
                      }));
                return Jest.test("it returns the value", (function (param) {
                              var result = Listz$Data61Reason.headOr(0, /* [] */0);
                              return Jest.Expect.toBe(0, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("headOr2", (function (param) {
                Jest.test("it returns the head", (function (param) {
                        var result = Listz$Data61Reason.headOr2(0, /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toBe(1, Jest.Expect.expect(result));
                      }));
                return Jest.test("it returns the value", (function (param) {
                              var result = Listz$Data61Reason.headOr2(0, /* [] */0);
                              return Jest.Expect.toBe(0, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("product", (function (param) {
                Jest.test("it handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.product(/* [] */0);
                        return Jest.Expect.toBe(1, Jest.Expect.expect(result));
                      }));
                Jest.test("it produces the product of 1, 2, 3", (function (param) {
                        var result = Listz$Data61Reason.product(/* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toBe(6, Jest.Expect.expect(result));
                      }));
                return Jest.test("it produces the product of 1, 2, 3, 4", (function (param) {
                              var result = Listz$Data61Reason.product(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toBe(24, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("sum", (function (param) {
                Jest.test("it handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.sum(/* [] */0);
                        return Jest.Expect.toBe(0, Jest.Expect.expect(result));
                      }));
                Jest.test("it produces the sum of 1, 2, 3", (function (param) {
                        var result = Listz$Data61Reason.sum(/* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toBe(6, Jest.Expect.expect(result));
                      }));
                return Jest.test("it produces the sum of 1, 2, 3, 4", (function (param) {
                              var result = Listz$Data61Reason.sum(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toBe(10, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("length", (function (param) {
                Jest.test("it handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.length(/* [] */0);
                        return Jest.Expect.toBe(0, Jest.Expect.expect(result));
                      }));
                return Jest.test("it handles a non-empty list", (function (param) {
                              var result = Listz$Data61Reason.length(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toBe(3, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("map", (function (param) {
                Jest.test("it handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.map((function (x) {
                                return (x << 1);
                              }), /* [] */0);
                        return Jest.Expect.toBe(/* [] */0, Jest.Expect.expect(result));
                      }));
                return Jest.test("it handles a non-empty listz", (function (param) {
                              var f = function (x) {
                                return (x << 1);
                              };
                              var result = Listz$Data61Reason.map(f, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          2,
                                          /* :: */[
                                            4,
                                            /* :: */[
                                              6,
                                              /* [] */0
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("filter", (function (param) {
                return Jest.test("it correctly filters a list", (function (param) {
                              var result = Listz$Data61Reason.filter(Util$Data61Reason.isEven, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* :: */[
                                            5,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          2,
                                          /* :: */[
                                            4,
                                            /* [] */0
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("+++", (function (param) {
                return Jest.test("it correctly appends two lists", (function (param) {
                              var result = Listz$Data61Reason.$plus$plus$plus(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ], /* :: */[
                                    4,
                                    /* :: */[
                                      5,
                                      /* :: */[
                                        6,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                4,
                                                /* :: */[
                                                  5,
                                                  /* :: */[
                                                    6,
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("flatten", (function (param) {
                return Jest.test("it correctly flattens an array of lists", (function (param) {
                              var result = Listz$Data61Reason.flatten(/* :: */[
                                    /* :: */[
                                      1,
                                      /* :: */[
                                        2,
                                        /* [] */0
                                      ]
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* [] */0
                                        ]
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          5,
                                          /* :: */[
                                            6,
                                            /* [] */0
                                          ]
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                4,
                                                /* :: */[
                                                  5,
                                                  /* :: */[
                                                    6,
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("flatMap", (function (param) {
                Jest.test("it correctly flatMaps a list", (function (param) {
                        var f = function (x) {
                          return /* :: */[
                                  x,
                                  /* :: */[
                                    x + 1 | 0,
                                    /* :: */[
                                      x + 2 | 0,
                                      /* [] */0
                                    ]
                                  ]
                                ];
                        };
                        var result = Listz$Data61Reason.flatMap(f, /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toEqual(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            3,
                                            /* :: */[
                                              4,
                                              /* :: */[
                                                3,
                                                /* :: */[
                                                  4,
                                                  /* :: */[
                                                    5,
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ], Jest.Expect.expect(result));
                      }));
                return Jest.test("it correctly flatMaps a list using compose", (function (param) {
                              var f = function (x) {
                                return /* :: */[
                                        x,
                                        /* :: */[
                                          x + 1 | 0,
                                          /* :: */[
                                            x + 2 | 0,
                                            /* [] */0
                                          ]
                                        ]
                                      ];
                              };
                              var result = Listz$Data61Reason.flatMapWithCompose(f)(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                2,
                                                /* :: */[
                                                  3,
                                                  /* :: */[
                                                    4,
                                                    /* :: */[
                                                      3,
                                                      /* :: */[
                                                        4,
                                                        /* :: */[
                                                          5,
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("flattenAgain", (function (param) {
                return Jest.test("it correctly flattens an array of lists", (function (param) {
                              var result = Listz$Data61Reason.flattenAgain(/* :: */[
                                    /* :: */[
                                      1,
                                      /* :: */[
                                        2,
                                        /* [] */0
                                      ]
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* [] */0
                                        ]
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          5,
                                          /* :: */[
                                            6,
                                            /* [] */0
                                          ]
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                4,
                                                /* :: */[
                                                  5,
                                                  /* :: */[
                                                    6,
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("seqOptional", (function (param) {
                Jest.test("it correctly handles a list of values", (function (param) {
                        var result = Listz$Data61Reason.seqOptional(/* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toEqual("Some(1,2,3,0)", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                      }));
                Jest.test("it correctly handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.seqOptional(/* [] */0);
                        return Jest.Expect.toEqual("Some(0)", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                      }));
                return Jest.test("it correctly handles a None value", (function (param) {
                              var result = Listz$Data61Reason.seqOptional(/* :: */[
                                    1,
                                    /* :: */[
                                      undefined,
                                      /* :: */[
                                        10,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual("None", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                            }));
              }));
        Jest.describe("find", (function (param) {
                Jest.test("it returns None when no elements found", (function (param) {
                        var result = Listz$Data61Reason.find(Util$Data61Reason.isEven, /* :: */[
                              1,
                              /* :: */[
                                3,
                                /* :: */[
                                  5,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toEqual("None", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                      }));
                Jest.test("it returns None for an empty list", (function (param) {
                        var result = Listz$Data61Reason.find(Util$Data61Reason.isEven, /* [] */0);
                        return Jest.Expect.toEqual("None", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                      }));
                Jest.test("it finds a matching element", (function (param) {
                        var result = Listz$Data61Reason.find(Util$Data61Reason.isEven, /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* :: */[
                                    5,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]);
                        return Jest.Expect.toEqual("Some(2)", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                      }));
                return Jest.test("it finds the first matching element", (function (param) {
                              var result = Listz$Data61Reason.find(Util$Data61Reason.isEven, /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* :: */[
                                            5,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual("Some(2)", Jest.Expect.expect(Util$Data61Reason.optionToString(result)));
                            }));
              }));
        Jest.describe("lengthGT4", (function (param) {
                Jest.test("it correctly handles a list of length 3", (function (param) {
                        var result = Listz$Data61Reason.lengthGT4(/* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(result));
                      }));
                Jest.test("it correctly handles an empty list", (function (param) {
                        var result = Listz$Data61Reason.lengthGT4(/* [] */0);
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(result));
                      }));
                return Jest.test("it correctly handles a list of length 5", (function (param) {
                              var result = Listz$Data61Reason.lengthGT4(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* :: */[
                                          4,
                                          /* :: */[
                                            5,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(true, Jest.Expect.expect(result));
                            }));
              }));
        return Jest.describe("reverse", (function (param) {
                      Jest.test("it correctly handles a list", (function (param) {
                              var result = Listz$Data61Reason.reverse(/* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        3,
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                              return Jest.Expect.toEqual(/* :: */[
                                          3,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              1,
                                              /* [] */0
                                            ]
                                          ]
                                        ], Jest.Expect.expect(result));
                            }));
                      return Jest.test("it correctly handles an empty list", (function (param) {
                                    var result = Listz$Data61Reason.reverse(/* [] */0);
                                    return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(result));
                                  }));
                    }));
      }));

/*  Not a pure module */
