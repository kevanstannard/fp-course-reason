// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Validation$Data61Reason = require("../src/Validation.bs.js");

Jest.describe("ExactlyOne", (function (param) {
        Jest.describe("isError", (function (param) {
                Jest.test("isError should indicate an error", (function (param) {
                        var result = Validation$Data61Reason.isError(/* Error */Block.__(0, ["message"]));
                        return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                      }));
                return Jest.test("isError should indicate not an error", (function (param) {
                              var result = Validation$Data61Reason.isError(/* Value */Block.__(1, [123]));
                              return Jest.Expect.toBe(false, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("isValue", (function (param) {
                Jest.test("isValue should indicate a value", (function (param) {
                        var result = Validation$Data61Reason.isValue(/* Error */Block.__(0, ["message"]));
                        return Jest.Expect.toBe(false, Jest.Expect.expect(result));
                      }));
                return Jest.test("isValue should indicate not a value", (function (param) {
                              var result = Validation$Data61Reason.isValue(/* Value */Block.__(1, [123]));
                              return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                            }));
              }));
        return Jest.describe("mapValidation", (function (param) {
                      Jest.test("mapValidation should map an error", (function (param) {
                              var f = function (n) {
                                return n + 10 | 0;
                              };
                              var result = Validation$Data61Reason.mapValidation(f, /* Error */Block.__(0, ["message"]));
                              return Jest.Expect.toBe("Error(message)", Jest.Expect.expect(Validation$Data61Reason.toString(result)));
                            }));
                      return Jest.test("mapValidation should map a value", (function (param) {
                                    var f = function (n) {
                                      return n + 10 | 0;
                                    };
                                    var result = Validation$Data61Reason.mapValidation(f, /* Value */Block.__(1, [7]));
                                    return Jest.Expect.toBe("Value(17)", Jest.Expect.expect(Validation$Data61Reason.toString(result)));
                                  }));
                    }));
      }));

/*  Not a pure module */
