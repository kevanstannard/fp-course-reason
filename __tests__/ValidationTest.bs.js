// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Util$FpCourseReason = require("../src/Util.bs.js");
var Validation$FpCourseReason = require("../src/Validation.bs.js");

Jest.describe("ExactlyOne", (function (param) {
        Jest.describe("isError", (function (param) {
                Jest.test("isError should indicate an error", (function (param) {
                        var result = Validation$FpCourseReason.isError({
                              TAG: /* Error */0,
                              _0: "message"
                            });
                        return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                      }));
                return Jest.test("isError should indicate not an error", (function (param) {
                              var result = Validation$FpCourseReason.isError({
                                    TAG: /* Value */1,
                                    _0: 123
                                  });
                              return Jest.Expect.toBe(false, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("isValue", (function (param) {
                Jest.test("isValue should indicate a value", (function (param) {
                        var result = Validation$FpCourseReason.isValue({
                              TAG: /* Error */0,
                              _0: "message"
                            });
                        return Jest.Expect.toBe(false, Jest.Expect.expect(result));
                      }));
                return Jest.test("isValue should indicate not a value", (function (param) {
                              var result = Validation$FpCourseReason.isValue({
                                    TAG: /* Value */1,
                                    _0: 123
                                  });
                              return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                            }));
              }));
        Jest.describe("mapValidation", (function (param) {
                Jest.test("mapValidation should map an error", (function (param) {
                        var f = function (n) {
                          return n + 10 | 0;
                        };
                        var result = Validation$FpCourseReason.mapValidation(f, {
                              TAG: /* Error */0,
                              _0: "message"
                            });
                        return Jest.Expect.toBe("Error(message)", Jest.Expect.expect(Validation$FpCourseReason.toString(result)));
                      }));
                return Jest.test("mapValidation should map a value", (function (param) {
                              var f = function (n) {
                                return n + 10 | 0;
                              };
                              var result = Validation$FpCourseReason.mapValidation(f, {
                                    TAG: /* Value */1,
                                    _0: 7
                                  });
                              return Jest.Expect.toBe("Value(17)", Jest.Expect.expect(Validation$FpCourseReason.toString(result)));
                            }));
              }));
        Jest.describe("bindValidation", (function (param) {
                Jest.test("bindValidation should bind an error", (function (param) {
                        var f = function (n) {
                          if (Util$FpCourseReason.isEven(n)) {
                            return {
                                    TAG: /* Value */1,
                                    _0: n + 10 | 0
                                  };
                          } else {
                            return {
                                    TAG: /* Error */0,
                                    _0: "odd"
                                  };
                          }
                        };
                        var result = Validation$FpCourseReason.bindValidation(f, {
                              TAG: /* Error */0,
                              _0: "message"
                            });
                        return Jest.Expect.toBe("Error(message)", Jest.Expect.expect(Validation$FpCourseReason.toString(result)));
                      }));
                Jest.test("bindValidation should bind an odd value", (function (param) {
                        var f = function (n) {
                          if (Util$FpCourseReason.isEven(n)) {
                            return {
                                    TAG: /* Value */1,
                                    _0: n + 10 | 0
                                  };
                          } else {
                            return {
                                    TAG: /* Error */0,
                                    _0: "odd"
                                  };
                          }
                        };
                        var result = Validation$FpCourseReason.bindValidation(f, {
                              TAG: /* Value */1,
                              _0: 7
                            });
                        return Jest.Expect.toBe("Error(odd)", Jest.Expect.expect(Validation$FpCourseReason.toString(result)));
                      }));
                return Jest.test("bindValidation should bind an even value", (function (param) {
                              var f = function (n) {
                                if (Util$FpCourseReason.isEven(n)) {
                                  return {
                                          TAG: /* Value */1,
                                          _0: n + 10 | 0
                                        };
                                } else {
                                  return {
                                          TAG: /* Error */0,
                                          _0: "odd"
                                        };
                                }
                              };
                              var result = Validation$FpCourseReason.bindValidation(f, {
                                    TAG: /* Value */1,
                                    _0: 8
                                  });
                              return Jest.Expect.toBe("Value(18)", Jest.Expect.expect(Validation$FpCourseReason.toString(result)));
                            }));
              }));
        Jest.describe("valueOr", (function (param) {
                Jest.test("valueOr handles an error", (function (param) {
                        var result = Validation$FpCourseReason.valueOr({
                              TAG: /* Error */0,
                              _0: "message"
                            }, 3);
                        return Jest.Expect.toBe(3, Jest.Expect.expect(result));
                      }));
                return Jest.test("valueOr handles a value", (function (param) {
                              var result = Validation$FpCourseReason.valueOr({
                                    TAG: /* Value */1,
                                    _0: 7
                                  }, 3);
                              return Jest.Expect.toBe(7, Jest.Expect.expect(result));
                            }));
              }));
        return Jest.describe("errorOr", (function (param) {
                      Jest.test("errorOr handles an error", (function (param) {
                              var result = Validation$FpCourseReason.errorOr({
                                    TAG: /* Error */0,
                                    _0: "message"
                                  }, "q");
                              return Jest.Expect.toBe("message", Jest.Expect.expect(result));
                            }));
                      return Jest.test("errorOr handles a value", (function (param) {
                                    var result = Validation$FpCourseReason.errorOr({
                                          TAG: /* Value */1,
                                          _0: 7
                                        }, "q");
                                    return Jest.Expect.toBe("q", Jest.Expect.expect(result));
                                  }));
                    }));
      }));

/*  Not a pure module */
